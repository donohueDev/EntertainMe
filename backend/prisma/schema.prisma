// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Anime {
  id                Int         @id @default(autoincrement())
  mal_id            Int         @unique  // Changed to not be primary key
  slug              String      @unique
  title             String
  title_english     String?
  title_japanese    String?
  synopsis           String?
  background         String?
  type               String?
  source             String?
  episodes           Int?
  status             String?
  airing             Boolean
  aired_from         DateTime?
  aired_to           DateTime?
  duration           String?
  rating             String?
  score              Float?
  scored_by          Int?
  rank               Int?
  popularity         Int?
  members            Int?
  favorites          Int?
  season             String?
  year               Int?
  approved           Boolean
  broadcast_day      String?
  broadcast_time     String?
  broadcast_timezone String?
  broadcast_string   String?
  trailer_url        String?
  trailer_youtube_id String?
  trailer_embed_url  String?
  image_url          String?
  image_large_url    String?
  image_small_url    String?
  updated_at         DateTime    @default(now())
  userAnimes        UserAnime[] 

  @@index([title])
}

model Game {
  id                Int           @id @default(autoincrement())
  slug              String        @unique
  name              String
  released          DateTime?
  tba               Boolean?
  background_image  String?
  metacritic        Int?
  playtime          Int?
  updated           DateTime?
  esrb_rating_id    Int?
  esrb_rating       EsrbRating?   @relation(fields: [esrb_rating_id], references: [id])
  description_raw   String?
  
  // RAWG data
  rawg_rating       Float?
  
  // Site statistics
  rating       Float?    @default(0)
  rating_top   Int       @default(0)
  ratings_count Int      @default(0)
  ratings      Json?     @default("{}")
  reviews_count Int      @default(0)
  added        Int       @default(0)
  added_by_status   Json?     @default("{\"playing\":0,\"planned\":0,\"completed\":0,\"dropped\":0}")

  
  // Relationships
  platforms         GamePlatform[]
  tags             GameTag[]
  userGames        UserGame[]
  topGames         Top50Games[]
  adultContent     AdultGame?

  @@index([name])
  @@index([esrb_rating_id])
}

model User {
  id         Int        @id @default(autoincrement())
  email      String     @unique
  username   String     @unique
  password   String
  created_at DateTime   @default(now())
  userGames  UserGame[]
  userAnimes UserAnime[] // Add this line

  @@index([username, email])
}

model UserGame {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  game        Game     @relation(fields: [gameId], references: [id])
  gameId      Int
  rating      Int?
  status      String?
  created_at  DateTime @default(now())
  
  @@unique([userId, gameId])
  @@index([rating])
}

model UserAnime {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  anime       Anime    @relation(fields: [animeId], references: [id])
  animeId     Int
  rating      Int?
  status      String? 
  created_at  DateTime @default(now())
  
  @@unique([userId, animeId])
  @@index([rating])
}

model Top50Games {
  id         Int      @id @default(autoincrement())
  game_id    Int
  rank       Int
  value      Float?
  created_at DateTime @default(now())
  game       Game     @relation(fields: [game_id], references: [id])

  @@unique([rank])
  @@index([game_id])
}

model Tag {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  slug       String    @unique
  games      GameTag[]
  created_at DateTime  @default(now())

  @@index([slug])
}

model GameTag {
  id         Int      @id @default(autoincrement())
  game_id    Int
  tag_id     Int
  game       Game     @relation(fields: [game_id], references: [id])
  tag        Tag      @relation(fields: [tag_id], references: [id])
  created_at DateTime @default(now())

  @@unique([game_id, tag_id])
  @@index([game_id])
  @@index([tag_id])
}

model AdultGame {
  id                Int      @id @default(autoincrement())
  game_id           Int      @unique
  game              Game     @relation(fields: [game_id], references: [id])
  reason            String   // general reason (adults-only-rating, explicit-content-tags, etc)
  trigger_tag       String?  // specific tag that caused the content to be marked explicit
  created_at        DateTime @default(now())

  @@index([game_id])
  @@index([trigger_tag])
}

model Platform {
  id         Int           @id
  slug       String       @unique
  name       String
  gamePlatforms GamePlatform[]
  created_at DateTime     @default(now())

  @@index([slug])
}

model GamePlatform {
  id            Int      @id @default(autoincrement())
  game_id       Int
  platform_id   Int
  released_at   String?
  requirements_min String?
  requirements_rec String?
  game          Game     @relation(fields: [game_id], references: [id])
  platform      Platform @relation(fields: [platform_id], references: [id])
  created_at    DateTime @default(now())

  @@unique([game_id, platform_id])
  @@index([game_id])
  @@index([platform_id])
}

model EsrbRating {
  id         Int      @id
  slug       String   @unique
  name       String
  games      Game[]
  created_at DateTime @default(now())

  @@index([slug])
}