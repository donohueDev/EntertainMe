// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Anime {
  id                Int            @id @default(autoincrement())
  mal_id            Int            @unique
  slug              String         @unique
  url               String?
  title             String
  title_english     String?
  title_japanese    String?
  title_synonyms    String[]       // Array of strings
  synopsis          String?
  background        String?
  type              String?
  source            String
  api_source        String
  api_source_id     String
  episodes          Int?
  status            String?
  airing            Boolean
  aired_from        DateTime?
  aired_to          DateTime?
  aired_string      String?        // "Sep 29, 2023 to Mar 22, 2024"
  aired_prop        Json?         
  duration          String?
  rating            String?
  score             Float?
  scored_by         Int?
  rank              Int?
  popularity        Int?
  members           Int?
  favorites         Int?
  season            String?
  year              Int?
  approved          Boolean
  broadcast_day     String?
  broadcast_time    String?
  broadcast_timezone String?
  broadcast_string  String?
  trailer           Json?          
  images            Json?          
  producers         AnimeProducer[]
  titles            AnimeTitle[]
  userAnimes        UserAnime[]
  topAnimes        Top50Anime[]
  updated_at        DateTime       @default(now())
  adult             Boolean         @default(false)

  // Site statistics (user aggregate values)
  site_rating       Float?    @default(0)
  site_ratings_count Int      @default(0)
  site_ratings      Json?     @default("{}")
  site_reviews_count Int      @default(0)
  site_added        Int       @default(0)
  site_added_by_status   Json?     @default("{\"watching\":0,\"planned\":0,\"completed\":0,\"dropped\":0}")

  @@index([title])
  @@unique([api_source, api_source_id])
}

model AnimeTitle {
  id        Int    @id @default(autoincrement())
  anime     Anime  @relation(fields: [animeId], references: [id])
  animeId   Int
  type      String
  title     String
}

model AnimeProducer {
  id        Int    @id @default(autoincrement())
  anime     Anime  @relation(fields: [animeId], references: [id])
  animeId   Int
  mal_id    Int
  type      String
  name      String
  url       String
}

model Game {
  id                Int           @id @default(autoincrement())
  slug              String        @unique
  name              String
  released          DateTime?
  tba               Boolean?
  background_image  String?
  metacritic        Int?
  playtime          Int?
  updated           DateTime?
  esrb_rating_id    Int?
  esrb_rating       EsrbRating?   @relation(fields: [esrb_rating_id], references: [id])
  description_raw   String?

  // RAWG data
  rawg_rating       Float?

  // Site statistics
  rating       Float?    @default(0)
  rating_top   Int       @default(0)
  ratings_count Int      @default(0)
  ratings      Json?     @default("{}")
  reviews_count Int      @default(0)
  added        Int       @default(0)
  added_by_status   Json?     @default("{\"playing\":0,\"planned\":0,\"completed\":0,\"dropped\":0}")

  // API source fields
  api_source    String
  api_source_id String

  // Relationships
  platforms         GamePlatform[]
  tags             GameTag[]
  userGames        UserGame[]
  topGames         Top50Games[]
  adultContent     AdultGame?

  @@index([name])
  @@index([esrb_rating_id])
  @@unique([api_source, api_source_id])
}

model User {
  id                        Int       @id @default(autoincrement())
  email                     String    @unique
  username                  String    @unique
  password                  String
  display_name              String?
  avatar_url               String?
  bio                      String?
  location                 String?
  website                  String?
  last_login              DateTime   @default(now())
  last_activity           DateTime   @default(now())
  is_active               Boolean    @default(true)
  login_count             Int       @default(1)
  preferences             Json      @default("{}")
  content_filters         Json      @default("{}")
  email_verified          Boolean   @default(false)
  verification_token      String?
  verification_token_expires DateTime?
  created_at              DateTime  @default(now())
  
  // Review counts
  anime_reviews_count Int @default(0)
  game_reviews_count  Int @default(0)
  total_reviews_count Int @default(0)
  
  // List statistics
  watching_anime_count  Int   @default(0)
  completed_anime_count Int   @default(0)
  planned_anime_count   Int   @default(0)
  dropped_anime_count   Int   @default(0)
  
  playing_games_count   Int   @default(0)
  completed_games_count Int   @default(0)
  planned_games_count   Int   @default(0)
  dropped_games_count   Int   @default(0)
  
  // Relations
  userGames  UserGame[]
  userAnimes UserAnime[]

  @@index([username, email])
}

model UserGame {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  game        Game     @relation(fields: [gameId], references: [id])
  gameId      Int
  rating      Int?
  status      String?
  created_at  DateTime @default(now())
  
  @@unique([userId, gameId])
  @@index([rating])
}

model UserAnime {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  anime       Anime    @relation(fields: [animeId], references: [id])
  animeId     Int
  rating      Int?
  status      String? 
  created_at  DateTime @default(now())
  
  @@unique([userId, animeId])
  @@index([rating])
}

model Top50Games {
  id         Int      @id @default(autoincrement())
  game_id    Int
  rank       Int
  value      Float?
  created_at DateTime @default(now())
  game       Game     @relation(fields: [game_id], references: [id])

  @@unique([rank])
  @@index([game_id])
}

model Top50Anime {
  id         Int      @id @default(autoincrement())
  anime_id   Int
  rank       Int
  value      Float?
  created_at DateTime @default(now())
  anime      Anime    @relation(fields: [anime_id], references: [id])

  @@unique([rank])
  @@index([anime_id])
}

model Tag {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  slug       String    @unique
  games      GameTag[]
  created_at DateTime  @default(now())

  @@index([slug])
}

model GameTag {
  id         Int      @id @default(autoincrement())
  game_id    Int
  tag_id     Int
  game       Game     @relation(fields: [game_id], references: [id])
  tag        Tag      @relation(fields: [tag_id], references: [id])
  created_at DateTime @default(now())

  @@unique([game_id, tag_id])
  @@index([game_id])
  @@index([tag_id])
}

model AdultGame {
  id                Int      @id @default(autoincrement())
  game_id           Int      @unique
  game              Game     @relation(fields: [game_id], references: [id])
  reason            String   // general reason (adults-only-rating, explicit-content-tags, etc)
  trigger_tag       String?  // specific tag that caused the content to be marked explicit
  created_at        DateTime @default(now())

  @@index([game_id])
  @@index([trigger_tag])
}

model Platform {
  id         Int           @id
  slug       String       @unique
  name       String
  gamePlatforms GamePlatform[]
  created_at DateTime     @default(now())

  @@index([slug])
}

model GamePlatform {
  id            Int      @id @default(autoincrement())
  game_id       Int
  platform_id   Int
  released_at   String?
  requirements_min String?
  requirements_rec String?
  game          Game     @relation(fields: [game_id], references: [id])
  platform      Platform @relation(fields: [platform_id], references: [id])
  created_at    DateTime @default(now())

  @@unique([game_id, platform_id])
  @@index([game_id])
  @@index([platform_id])
}

model EsrbRating {
  id         Int      @id
  slug       String   @unique
  name       String
  games      Game[]
  created_at DateTime @default(now())

  @@index([slug])
}